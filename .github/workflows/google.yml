# This workflow will build a Docker container, publish it to Google Artifact
# Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# Prerequisites:
# 1. Enable these Google Cloud APIs:
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
# 2. Make sure your repo has Kubernetes manifests (deployment.yml, service.yml, kustomization.yml, etc.)
#
# 3. Configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation
#
# 4. Update all TODO fields below with your project values.

name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'my-project' # TODO: update to your Google Cloud project ID
  GAR_LOCATION: 'us-central1' # TODO: update to your Artifact Registry region
  GKE_CLUSTER: 'cluster-1' # TODO: update to your GKE cluster name
  GKE_ZONE: 'us-central1-c' # TODO: update to your cluster zone
  DEPLOYMENT_NAME: 'gke-test' # TODO: update to your k8s deployment name
  REPOSITORY: 'samples' # TODO: update to your Artifact Registry repo
  IMAGE: 'static-site'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # TODO: update

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    steps:
      - name: 'Checkout source'
        uses: actions/checkout@v4

      # Authenticate to Google Cloud via Workload Identity Federation
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}

      # Authenticate Docker with GAR
      - name: 'Docker Auth'
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.auth_token }}
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Get GKE credentials
      - name: 'Set up GKE credentials'
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build and push Docker image
      - name: 'Build and push Docker container'
        run: |
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      # Install Kustomize
      - name: 'Set up Kustomize'
        run: |
          curl -sLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          tar -xvzf kustomize.tar.gz
          chmod +x kustomize
          sudo mv kustomize /usr/local/bin/

      # Deploy to GKE
      - name: 'Deploy to GKE'
        run: |
          # Replace image in manifests with the newly built one
          kustomize edit set image ${IMAGE}=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA

          # Apply manifests
          kustomize build . | kubectl apply -f -

          # Wait for rollout to complete
          kubectl rollout status deployment/$DEPLOYMENT_NAME

          # Show services
          kubectl get services -o wide
